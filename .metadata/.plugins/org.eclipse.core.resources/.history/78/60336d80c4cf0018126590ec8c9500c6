package 알고리즘_이진Tree;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class BinarySearchTree {

	int key;
	BinarySearchTree left;
	BinarySearchTree right;
	BinarySearchTree rootNode;
	int cnt = 0;

	public BinarySearchTree insertKey(BinarySearchTree T, int x) {
		cnt++;
		if (T == null) {
			BinarySearchTree newNode = new BinarySearchTree();
			newNode.key = x;
			return newNode;
		} else if (x < T.key) {
			T.left = insertKey(T.left, x);
			return T;
		} else if (x > T.key) {
			T.right = insertKey(T.right, x);
			return T;
		} else {
			return T;
		}
	}

	public void insert(int x) {
		rootNode = insertKey(rootNode, x);
	
		System.out.println("cnt:"+cnt);
	}


//	public void printNode(BinarySearchTree N) {
//		if (N != null) {
//
//			printNode(N.left);
//			System.out.print(N.key);
//			printNode(N.right);
//			
//		}
//	}
//
//	public void printBST() {
//		printNode(rootNode);
//		System.out.println();
//	}

	public static void main(String args[]) throws NumberFormatException, IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BinarySearchTree T = new BinarySearchTree();
		
		int N = Integer.parseInt(br.readLine().trim());
		
		for(int i=0; i<N;i++) {
			T.insert(Integer.parseInt(br.readLine().trim()));
		}
		


//		System.out.println(" The Tree is:");
//		T.printBST();
//		System.out.println();



	}
}
