package 알고리즘_이진Tree;

public class TreeNode {
	String key;
	TreeNode left;
	TreeNode right;
}

public class BinarySearchTree {
private TreeNode rootNode;
	
	/*
	 * 	r = a.compareTo(b);
	 *  r = 0 이면  a == b
	 *  r < 0 이면  a <  b
	 *  r > 0 이면  a >  b
	 *  기준 String 객체가 매개변수 String 객체보다  사전상의 순서가 앞일 때 : 음수
	 *   						''					    : 양수
	 *   										같을때        : 0
	 */
	private TreeNode insertKey(TreeNode T, String x){
		if( T==null){
			TreeNode newNode = new TreeNode();
			newNode.key = x;
			return newNode;
		}
		else if(x.compareTo(T.key)<0){
			T.left = insertKey(T.left,x);
			return T;
		}
		else if(x.compareTo(T.key)>0){
			T.right = insertKey(T.right,x);
			return T;
		}
		else
		{
			return T;
		}
	}
	
	void insert(String x){
		rootNode = insertKey(rootNode,x);
	}
	
	TreeNode find(String x){
		TreeNode T = rootNode;
		int result;
		while(T !=null){
			if((result = x.compareTo(T.key))<0){
				T = T.left;
			}else if(result ==0){
				return T;
			}else{
				T = T.right;
			}
			
		}
		return T;
	}
	private void printNode(TreeNode N){
		if(N!=null){
			System.out.print("(");
			printNode(N.left);
			System.out.print(N.key);
			printNode(N.right);
			System.out.print(")");
		}
	}
	
	void printBST(){
		printNode(rootNode);
		System.out.println();
	}
}


}
