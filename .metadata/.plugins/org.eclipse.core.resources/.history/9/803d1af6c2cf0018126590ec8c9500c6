package 알고리즘_이진Tree;

public class BinarySearchTree {

	int key;
	BinarySearchTree left;
	BinarySearchTree right;
	BinarySearchTree rootNode;
	int cnt = 0;

	public BinarySearchTree insertKey(BinarySearchTree T, int x) {
		cnt++;
		if (T == null) {
			BinarySearchTree newNode = new BinarySearchTree();
			newNode.key = x;
			return newNode;
		} else if (x < T.key) {
			T.left = insertKey(T.left, x);
			return T;
		} else if (x > T.key) {
			T.right = insertKey(T.right, x);
			return T;
		} else {
			return T;
		}
	}

	public void insert(int x) {
		rootNode = insertKey(rootNode, x);
	}

	public BinarySearchTree find(int x) {
		BinarySearchTree T = rootNode;

		while (T != null) {
			if (x < T.key) {
				T = T.left;
			} else if (x == T.key) {
				return T;
			} else {
				T = T.right;
			}

		}
		return T;
	}

	public void printNode(BinarySearchTree N) {
		if (N != null) {

			printNode(N.left);
			System.out.print(N.key);
			printNode(N.right);
			System.out.println("cnt:"+cnt);
		}
	}

	public void printBST() {
		printNode(rootNode);
		System.out.println();
	}

	public static void main(String args[]) {
		BinarySearchTree T = new BinarySearchTree();

		T.insert(3);
		T.insert(1);
		T.insert(4);
		T.insert(7);
		T.insert(2);

		System.out.println(" The Tree is:");
		T.printBST();
		System.out.println();

		BinarySearchTree N = T.find(7);
		System.out.println("Key of node found = " + N.key);

	}
}
